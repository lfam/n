#!/bin/sh

# this variable contains the path to your notes
note_path=~/notes/

# this variable contains an optional suffix to remove from filenames
suffix=".txt"

# error message for for when you can't write to $note_path
path_error="You're trying to edit a file in $note_path but that directory doesn't exist or you don't have write permission. Try $(basename $0) --help for more information."

# these variables provide usage info and documentation for the script.
hint="Try '$(basename $0) --help' for more information"
help="$(basename $0), for carefree note taking and reading

You can change your notes directory by editing "\$note_path" in $(which $0)
You can choose a file suffix to hide by editing "\$suffix" in $(which $0)

Usage:	$(basename $0)				# print list of all notes
	$(basename $0) <optional note> -w		# print path to notes or specific note
	$(basename $0) <search string>		# if string is a note, open in editor
					# if not, search notes for string
	$(basename $0) <note> -n			# open note in text editor
	$(basename $0) -h OR -help OR --help		# print this help page
	Modes -n and -w can be placed before or after a note title.

Report any bugs to <lfamular@gmail.com>
"

ls_notes() {
	ls -t $note_path | sed "s!$suffix!!" | sed '1!G;h;$!d'
	printf "\n$hint\n"
}

which_notes() {
	if [ -z "$2" ]; then
		[ -d "$note_path" ] && printf "$note_path\n"\
		|| printf "Your notes are supposed to be in $note_path but that directory does not exist. Try creating it or try n --help for more information.\n"
	elif [ "$1" = "-w" ]; then
		[ -e "$note_path$2$suffix" ] && printf "$note_path$2$suffix\n" \
		|| printf "No "$2" in "$note_path"\n"
	elif [ "$2" = "-w" ]; then
		[ -e "$note_path$1$suffix" ] && printf "$note_path$1$suffix\n" \
		|| printf "No "$1" in "$note_path"\n"
	fi
}

edit_note() {
	if [ "$1" = "-n" ]; then
		[ -w "$note_path" ] && ${EDITOR:-vi} "$note_path$2$suffix" \
		|| printf "$path_error\n"
	elif [ "$2" = "-n" ]; then
		[ -w "$note_path" ] && ${EDITOR:-vi} "$note_path$1$suffix" \
		|| printf "$path_error\n"
	fi
}

search_notes() {
	{ find -L $note_path -iname "*$1*" | sed "s!$note_path!!" | sed 's!'$suffix'$!!' ;
	grep -E -iRso ".{0,30}$1.{0,30}" $note_path \
	| sed "s!$note_path!!" \
	| sed "s/$suffix:/\ :\ /" ; } \
	| sed '1!G;h;$!d' # this reverses the order of lines, so that new files are 
			  # near the command line
	if [ -f "$note_path$1$suffix" ]; then
		printf "\nOpen matching file $1$suffix? y/*\n"
		read ask
		case $ask in
			[Yy]* )	${EDITOR:-vi} "$note_path$1$suffix";
				break;;
			* )	break;;
		esac
	fi
}

main() {
	# running with no argument returns a list of of all notes
	if [ -z "$1" ]; then
		ls_notes

	# if option -h, -help, or --help is set, print help file
	elif [ "$1" = "-h" ] || [ "$1" = "-help" ] || [ "$1" = "--help" ]; then
		printf "$help"

	# if option -w is set, print path to argument
	elif [ "$1" = "-w" ] || [ "$2" = "-w" ]; then
		which_notes $1 $2

	# if option -n is set, open $1 in text editor
	elif [ "$1" = "-n" ] || [ "$2" = "-n" ]; then
		edit_note $1 $2

	# running with an argument returns a list of notes whose filenames and contents
	# contain that argument
	else
		search_notes $1
	fi
}
main "$@"
