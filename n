#!/bin/sh

name=$(basename "$0")

# set the directory to target based on $0, from an environment variable
eval dir=\$"${name}"DIR
dir="${dir:-$HOME/notes/}"

# this variable contains an optional suffix to remove from filenames
eval suffix=\$"${name}"SUFFIX
suffix="${suffix:-}"

edit_note() {
	${EDITOR:-vi} "$dir$1$suffix"
	return $?
}

ls_notes() {
	ls -rt "$dir" | strip_suffix
}

search_notes() {
	{
	find -L "$dir" -iname "*$1*" | strip_prefix | strip_suffix ;
	grep -is -E ".$1." "$dir"* \
		| strip_prefix \
		| sed "s!$suffix:!\ :\ !" ;
	} | nl | sort -nr | cut -f2- | nl -n ln -s' ' -w2
}

strip_prefix() {
	while read input; do
		echo "${input#$dir}"
	done
}

strip_suffix() {
	while read input; do
		echo "${input%$suffix}"
	done
}

usage() {
	cat <<EOF
$name, for carefree note taking and reading

You can set your notes directory by exporting the environment variable 
named \$${name}DIR.
You can set a filename suffix to hide by exporting the environment variable
named \$${name}SUFFIX.

Usage:	$name				# print list of all notes
	$name <optional note> -w		# print path to notes or specific note
	$name <search string>		# if string is a note, open in editor
					# if not, search notes for string
	$name <note> -n			# open note in text editor
	$name -h OR -help OR --help		# print this help page
	Modes -n and -w can be placed before or after a note title.

Report any bugs to <leo@famulari.name>
EOF
}

which_notes() {
	if [ -z "$1" ]; then
		printf "%s\n" "$dir"
	else
		test -e "$dir$1$suffix" || { printf "File not found: " 1>&2; ret=1; }
		printf "%s%s%s\n" "$dir" "$1" "$suffix"
	fi
	return ${ret:-0}
}

main() {
	ret=0;
	[ -z "$1" ] && ls_notes

	while [ $# -gt 0 ]; do
		case "$1" in
		"-w" )
			wflag=1
			shift
			continue
			;;
		"-n" )
			nflag=1
			shift
			continue
			;;
		--help | -help | -h )
			hflag=1
			shift
			continue
			;;
		* )
			str="$1"
			shift
			continue
			;;
		esac
	done

	test ${nflag:-0} -eq 1 && { edit_note "$str"; ret=$((ret+$?)); bool="false"; }
	test ${wflag:-0} -eq 1 && { which_notes "$str"; ret=$((ret+$?)); bool="false"; }
	test ${hflag:-0} -eq 1 && { usage; bool="false"; }
	# this is basically testing twice...
	test ${bool:-true} = "true" && test -n "$str" && search_notes "$str"

	exit ${ret:-0}
}
main "$@"
